function Key(){this.type=null;this.index=null;this.name=null;}Key.prototype.read=function(obj){if(typeof obj.type!=="undefined"&&typeof obj.index!=="undefined"){this.type=obj.type;this.index=obj.index;if(obj.name){this.name=obj.name;}else{this.name=null;}}else{console.warn("Tried to read an invalid key!");}};Key.prototype.equals=function(key){if(!(key instanceof Key)){return false;}return(this.type===key.type)&&(this.index===key.index);};
Function.prototype.inherits=function(klass){if(klass.constructor===Function){this.prototype=new klass();this.prototype.constructor=this;this.prototype.parent=klass.prototype;}else{this.prototype=klass;this.prototype.constructor=this;this.prototype.parent=klass;}return this;};function KeyedObject(){this._key=null;this._loaded=false;}KeyedObject.prototype.key=function(newkey){if(!newkey){return this._key;}if(!this._key){this._key=new Key();}this._key.read(newkey);};KeyedObject.prototype.read=function(data){if(!data.key){throw"Tried to read an object without a key!";}var newkey=new Key();newkey.read(data.key);if(this._key&&!newkey.equals(this._key)){throw"Tried to change the key of an object!";}this._key.read(newkey);};
function ResManager(){this.factory=[];this.keylist=[];}ResManager.prototype.register_class=function(klass,clsidx){var type=clsidx;if(!type){if(!(klass instanceof Function)){throw"Trying to register a non-class type";}type=klass.prototype.ClsIdx;}if(this.factory[type]){console.warn("Registering with an index that is already used!");}this.factory[type]=klass;};ResManager.prototype.new_object=function(type){if(!this.factory[type]){throw"Trying to create an object of an nonexistent type!";}var obj=new this.factory[type]();var key=new Key();var idx=0;if(this.keylist[type]){idx=this.keylist[type].length;}key.read({"type":type,"index":idx});obj.key(key);this.register_key(key,obj);return obj;};ResManager.prototype.add_object=function(key){if(this.find(key)){return;}var obj=new this.factory[key.type]();obj.key(key);this.register_key(key,obj);return obj;};ResManager.prototype.register_key=function(key,obj){if(!(key instanceof Key)){throw"Invalid key passed to ResManager.register_key!";}if(!this.keylist[key.type]){this.keylist[key.type]=[];}this.keylist[key.type][key.index]=obj;};ResManager.prototype.find=function(key){if(!(key instanceof Key)){throw"Invalid key passed to ResManager.find!";}if(!this.keylist[key.type]){return null;}var obj=this.keylist[key.type][key.index];if(!obj){return null;}return obj;};ResManager.prototype.find_or_create=function(key){var obj=this.find(key);if(!obj){obj=this.add_object(key);}return obj;};ResManager.prototype.read=function(data){if(!data.key){throw"Tried to read an object without a key!";}var key=new Key();key.read(data.key);var obj=this.find_or_create(key);obj.read(data);obj._loaded=true;return obj;};ResManager.prototype.load=function(source){if(source instanceof Array){source.forEach(function(o){this.read(o);},this);}else{if(source instanceof String){var data=JSON.parse(source);if(!(data instanceof Array)){throw"Invalid JSON data";}data.forEach(function(o){this.read(o);},this);}else{console.error("Unknown source data passed to ResManager!");console.warn("Silently continuing");}}};
var gResMgr=new ResManager();
